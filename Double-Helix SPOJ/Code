def maxSumPath(arr1, arr2):
    i, j = 0, 0  # Pointers for both sequences
    sum1, sum2 = 0, 0  # Sums for each path
    result = 0  # Final max sum

    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            sum1 += arr1[i]
            i += 1
        elif arr1[i] > arr2[j]:
            sum2 += arr2[j]
            j += 1
        else:  # Found a common element
            result += max(sum1, sum2) + arr1[i]  # Take max sum + common value
            sum1 = sum2 = 0  # Reset sums
            i += 1
            j += 1

    # If anything is left in arr1 or arr2, collect the remaining sum
    while i < len(arr1):
        sum1 += arr1[i]
        i += 1
    while j < len(arr2):
        sum2 += arr2[j]
        j += 1

    result += max(sum1, sum2)  # Add the last collected sum
    return result

# Example Usage
arr1 = [3, 5, 7, 9, 20, 25, 30, 40, 55, 56, 57, 60, 62]
arr2 = [1, 4, 7, 11, 14, 25, 44, 47, 55, 57, 100]

print(maxSumPath(arr1, arr2))  # Output: 450
